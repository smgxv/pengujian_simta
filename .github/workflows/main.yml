name: CI/CD SIMTA

on:
  push:
    branches: [main]
  workflow_dispatch: {}

permissions:
  contents: read
  actions: write
  issues: write
  security-events: write

env:
  GO_VERSION: "1.23"

jobs:
  # 1. SAST - CodeQL (Go + JS)
  # sast-codeql:
  #   name: SAST dengan CodeQL (Go + JS)
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout source code
  #       uses: actions/checkout@v4

  #     - name: Setup Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: 1.23

  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v3
  #       with:
  #         languages: go, javascript

  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v3
  #       with:
  #         output: codeql-results

  #     # === Gate: Fail jika ada HIGH (>=7.0) atau CRITICAL (>=9.0) ===
  #     - name: Fail on High/Critical CodeQL findings
  #       run: |
  #         sudo apt-get update -y && sudo apt-get install -y jq
  #         shopt -s nullglob
  #         files=(codeql-results/*.sarif)
  #         if [ ${#files[@]} -eq 0 ]; then
  #           echo "Tidak ada file SARIF yang ditemukan di codeql-results/."
  #           exit 1
  #         fi

  #         total_high=0
  #         total_crit=0

  #         for f in "${files[@]}"; do
  #           echo "Memeriksa $f ..."
  #           crit=$(jq '[.runs[].results[] 
  #                       | select((.properties."security-severity" // "0" | tonumber) >= 9.0)
  #                     ] | length' "$f")
  #           high=$(jq '[.runs[].results[] 
  #                       | select((.properties."security-severity" // "0" | tonumber) >= 7.0
  #                                 and (.properties."security-severity" // "0" | tonumber) < 9.0)
  #                     ] | length' "$f")
  #           echo "  Critical: $crit, High: $high"
  #           total_crit=$((total_crit + crit))
  #           total_high=$((total_high + high))
  #         done

  #         echo "Total Critical: $total_crit, Total High: $total_high"

  #         if [ "$total_crit" -gt 0 ] || [ "$total_high" -gt 0 ]; then
  #           echo "❌ CodeQL menemukan temuan High/Critical. Gagal."
  #           exit 1
  #         else
  #           echo "✅ Tidak ada temuan High/Critical."
  #         fi

  # # DEPENDENCY SCAN (govulncheck)
  # dep-scan:
  #   needs: sast-codeql
  #   name: Govulncheck (${{ matrix.service.name }})
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       service:
  #         - { name: pengujian-ta-service,           path: pengujian_ta_service }
  #         - { name: pengujian-user-service,         path: pengujian_user_service }
  #         - { name: pengujian-document-service,     path: pengujian_document_service }
  #         - { name: pengujian-notification-service, path: pengujian_notification_service }

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     # Gate + simpan laporan TEXT
  #     - name: Govulncheck (gate + save text report)
  #       uses: golang/govulncheck-action@v1
  #       with:
  #         go-version-input: ${{ env.GO_VERSION }}         # contoh: "1.22.x" atau "1.23"
  #         work-dir: ${{ matrix.service.path }}             # jalankan per service (monorepo)
  #         go-package: ./...                                # analisis semua paket
  #         output-format: text                              # penting: TEXT → mengikuti exit code
  #         output-file: ${{ matrix.service.name }}-govulncheck.txt
  #         repo-checkout: false
  #         cache: true
  #         cache-dependency-path: ${{ matrix.service.path }}/go.sum

  #     # Arsipkan laporan TEXT
  #     - name: Upload govulncheck report (artifact)
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: govulncheck-${{ matrix.service.name }}
  #         path: ${{ matrix.service.name }}-govulncheck.txt


  # # IMAGE SCAN (trivy)
  # image-scan:
  #   needs: dep-scan
  #   name: Image Scan (${{ matrix.service.name }})
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       service:
  #         - { name: pengujian-ta-service,           path: pengujian_ta_service,           dockerfile: pengujian_ta_service/Dockerfile }
  #         - { name: pengujian-user-service,         path: pengujian_user_service,         dockerfile: pengujian_user_service/Dockerfile }
  #         - { name: pengujian-document-service,     path: pengujian_document_service,     dockerfile: pengujian_document_service/Dockerfile }
  #         - { name: pengujian-notification-service, path: pengujian_notification_service, dockerfile: pengujian_notification_service/Dockerfile }
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Build image (local daemon)
  #       run: |
  #         docker build \
  #           -f "${{ matrix.service.dockerfile }}" \
  #           -t "${{ matrix.service.name }}:scan" \
  #           "${{ matrix.service.path }}"

  #     - name: Trivy Image scan (gate)
  #       uses: aquasecurity/trivy-action@0.28.0
  #       with:
  #         image-ref: ${{ matrix.service.name }}:scan
  #         format: table
  #         vuln-type: os,library
  #         ignore-unfixed: true
  #         severity: CRITICAL      # atau 'CRITICAL,HIGH' sesuai kebijakan
  #         exit-code: '1'          # fail kalau ada temuan di level itu
  #         hide-progress: true
  #         timeout: 10m

  # Build Image ()
  build-pengujian-ta-service:
    # needs: image-scan
    name: Build Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build Image
        run: docker build -t smgxv/pengujian-ta-service -f pengujian_ta_service/Dockerfile pengujian_ta_service
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Image
        run: docker push smgxv/pengujian-ta-service
  
  build-pengujian-user-service:
    needs: image-scan
    name: Build User Service Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build Image
        run: docker build -t smgxv/pengujian-user-service -f pengujian_user_service/Dockerfile pengujian_user_service
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Image
        run: docker push smgxv/pengujian-user-service

  build-pengujian-document-service:
    needs: image-scan
    name: Build Document Service Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build Image
        run: docker build -t smgxv/pengujian-document-service -f pengujian_document_service/Dockerfile pengujian_document_service
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Image
        run: docker push smgxv/pengujian-document-service
  
  build-pengujian-notification-service:
    needs: image-scan
    name: Build Notification Service Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build Image
        run: docker build -t smgxv/pengujian-notification-service -f pengujian_notification_service/Dockerfile pengujian_notification_service
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Image
        run: docker push smgxv/pengujian-notification-service

  # Deploy ke lingkungan sementara 
  deploy-pengujian-ta-service:
    needs: build-pengujian-ta-service
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            docker stop pengujian-ta-service || true && docker rm pengujian-ta-service || true
            docker system prune -af
            docker pull smgxv/pengujian-ta-service
            docker run -d -p 8085:8085 --name pengujian-ta-service smgxv/pengujian-ta-service
            docker network connect simta_net pengujian-ta-service

  deploy-pengujian-user-service:
    needs: build-pengujian-user-service
    runs-on: ubuntu-latest
    steps:
      - name: Deploy User Service to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            docker stop pengujian-user-service || true && docker rm pengujian-user-service || true
            docker system prune -af
            docker pull smgxv/pengujian-user-service
            docker run -d -p 8086:8086 --name pengujian-user-service smgxv/pengujian-user-service
            docker network connect simta_net pengujian-user-service

  deploy-pengujian-document-service:
    needs: build-pengujian-document-service
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Document Service to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            docker stop pengujian-document-service || true && docker rm pengujian-document-service || true
            docker system prune -af
            docker pull smgxv/pengujian-document-service
            docker run -d -p 8087:8087 --name pengujian-document-service smgxv/pengujian-document-service
            docker network connect simta_net pengujian-document-service

  deploy-pengujian-notification-service:
    needs: build-pengujian-notification-service
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Notification Service to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            docker stop pengujian-notification-service || true && docker rm pengujian-notification-service || true
            docker system prune -af
            docker pull smgxv/pengujian-notification-service
            docker run -d -p 8088:8088 --name pengujian-notification-service -v /home/youruser/uploads:/app/uploads smgxv/pengujian-notification-service
            docker network connect simta_net pengujian-notification-service

  # # SAST - SONARCLOUD
  # sast-analysis:
  #   name: SAST dengan SonarCloud
  #   needs: deploy-staging
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout source code
  #       uses: actions/checkout@v4

  #     - name: Set up Java 17
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: 'temurin'
  #         java-version: '17'

  #     - name: SonarCloud Scan
  #       uses: SonarSource/sonarcloud-github-action@v2
  #       with:
  #         projectBaseDir: .
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  # DAST - OWASP ZAP untuk /taruna/dashboard
  zap-dast-taruna:
    runs-on: ubuntu-latest
    needs: 
      - deploy-pengujian-ta-service
      - deploy-pengujian-document-service
      - deploy-pengujian-user-service
      - deploy-pengujian-notification-service
    steps:
      - name: Pull ZAP image (GHCR)
        run: docker pull ghcr.io/zaproxy/zaproxy:stable

      - name: Run ZAP Quick Scan and generate HTML report
        run: |
          set -euo pipefail
          mkdir -p zap-out

          # Jalankan tanpa --rm agar bisa docker cp reportnya
          docker rm -f zaprun 2>/dev/null || true
          docker run --name zaprun \
            ghcr.io/zaproxy/zaproxy:stable \
              zap.sh -cmd \
                -addonupdate \
                -addoninstall quickstart,report \
                -config log.level=DEBUG \
                -quickurl "http://104.43.89.154:8085/taruna/dashboard" \
                -quickprogress \
                -quickout "/home/zap/.ZAP/reports/zap-report.html"

          # Simpan log & ambil report dari dalam container
          docker logs zaprun > zap-out/zap.log || true
          docker cp zaprun:/home/zap/.ZAP/reports/zap-report.html zap-out/zap-report.html || true

          echo "== Files in zap-out =="
          ls -lah zap-out

          # Bersihkan container
          docker rm -f zaprun || true

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: zaptaruna${{ github.run_id }}   # lowercase + angka saja
          path: |
            zap-out/zap-report.html
            zap-out/zap.log
          if-no-files-found: error

  # # DAST - OWASP ZAP untuk /dosen/dashboard
  # zap-dast-dosen:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Pull ZAP image (GHCR)
  #       run: docker pull ghcr.io/zaproxy/zaproxy:stable

  #     - name: Run ZAP Quick Scan and generate HTML report
  #       run: |
  #         set -euo pipefail
  #         mkdir -p zap-out

  #         # Jalankan tanpa --rm agar bisa docker cp reportnya
  #         docker rm -f zaprun 2>/dev/null || true
  #         docker run --name zaprun \
  #           ghcr.io/zaproxy/zaproxy:stable \
  #             zap.sh -cmd \
  #               -addonupdate \
  #               -addoninstall quickstart,report \
  #               -config log.level=DEBUG \
  #               -quickurl "http://104.43.89.154:8085/dosen/dashboard" \
  #               -quickprogress \
  #               -quickout "/home/zap/.ZAP/reports/zap-report.html"

  #         # Simpan log & ambil report dari dalam container
  #         docker logs zaprun > zap-out/zap.log || true
  #         docker cp zaprun:/home/zap/.ZAP/reports/zap-report.html zap-out/zap-report.html || true

  #         echo "== Files in zap-out =="
  #         ls -lah zap-out

  #         # Bersihkan container
  #         docker rm -f zaprun || true

  #     - name: Upload HTML report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: zapdosen${{ github.run_id }}
  #         path: |
  #           zap-out/zap-report.html
  #           zap-out/zap.log
  #         if-no-files-found: error

  # # DAST - OWASP ZAP untuk /admin/dashboard
  # zap-dast-admin:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Pull ZAP image (GHCR)
  #       run: docker pull ghcr.io/zaproxy/zaproxy:stable

  #     - name: Run ZAP Quick Scan and generate HTML report
  #       run: |
  #         set -euo pipefail
  #         mkdir -p zap-out

  #         # Jalankan tanpa --rm agar bisa docker cp reportnya
  #         docker rm -f zaprun 2>/dev/null || true
  #         docker run --name zaprun \
  #           ghcr.io/zaproxy/zaproxy:stable \
  #             zap.sh -cmd \
  #               -addonupdate \
  #               -addoninstall quickstart,report \
  #               -config log.level=DEBUG \
  #               -quickurl "http://104.43.89.154:8085/admin/dashboard" \
  #               -quickprogress \
  #               -quickout "/home/zap/.ZAP/reports/zap-report.html"

  #         # Simpan log & ambil report dari dalam container
  #         docker logs zaprun > zap-out/zap.log || true
  #         docker cp zaprun:/home/zap/.ZAP/reports/zap-report.html zap-out/zap-report.html || true

  #         echo "== Files in zap-out =="
  #         ls -lah zap-out

  #         # Bersihkan container
  #         docker rm -f zaprun || true

  #     - name: Upload HTML report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: zapadmin${{ github.run_id }}
  #         path: |
  #           zap-out/zap-report.html
  #           zap-out/zap.log
  #         if-no-files-found: error










  # #DEPENDENCY SCAN (govulncheck)
  # dep-scan:
  #   name: Govulncheck (${{ matrix.service.name }})
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       service:
  #         - { name: ta-service,           path: ta_service }
  #         - { name: user-service,         path: user_service }
  #         - { name: document-service,     path: document_service }
  #         - { name: notification-service, path: notification_service }

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     # Gate + simpan laporan TEXT
  #     - name: Govulncheck (gate + save text report)
  #       uses: golang/govulncheck-action@v1
  #       with:
  #         go-version-input: ${{ env.GO_VERSION }}         
  #         work-dir: ${{ matrix.service.path }}             
  #         go-package: ./...                                
  #         output-format: text                              
  #         output-file: ${{ matrix.service.name }}-govulncheck.txt
  #         repo-checkout: false
  #         cache: true
  #         cache-dependency-path: ${{ matrix.service.path }}/go.sum

  #     # Arsipkan laporan TEXT
  #     - name: Upload govulncheck report (artifact)
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: govulncheck-${{ matrix.service.name }}
  #         path: ${{ matrix.service.name }}-govulncheck.txt


  # # IMAGE SCAN (trivy)
  # image-scan:
  #   needs: dep-scan
  #   name: Image Scan (${{ matrix.service.name }})
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       service:
  #         - { name: ta-service,           path: ta_service,           dockerfile: ta_service/Dockerfile }
  #         - { name: user-service,         path: user_service,         dockerfile: user_service/Dockerfile }
  #         - { name: document-service,     path: document_service,     dockerfile: document_service/Dockerfile }
  #         - { name: notification-service, path: notification_service, dockerfile: notification_service/Dockerfile }
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Build image (local daemon)
  #       run: |
  #         docker build \
  #           -f "${{ matrix.service.dockerfile }}" \
  #           -t "${{ matrix.service.name }}:scan" \
  #           "${{ matrix.service.path }}"

  #     - name: Trivy Image scan (gate)
  #       uses: aquasecurity/trivy-action@0.28.0
  #       with:
  #         image-ref: ${{ matrix.service.name }}:scan
  #         format: table
  #         vuln-type: os,library
  #         ignore-unfixed: true
  #         severity: CRITICAL      
  #         exit-code: '1'          
  #         hide-progress: true
  #         timeout: 10m
