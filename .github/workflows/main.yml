name: CI Pipeline - Secure SIMTA

on:
  push:
    branches: [main]

jobs:

  # 1. TEST SEDERHANA
  running-tests:
    name: Run Basic Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.18

      - name: Run Dummy Tests
        run: echo "No tests defined yet. Placeholder."

  # 2. BUILD ALL SERVICES & PUSH IMAGE
  build-services:
    name: Build Docker Images
    needs: running-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build TA Service
        run: docker build -t smgxv/ta-service -f ta_service/Dockerfile ta_service

      - name: Build User Service
        run: docker build -t smgxv/user-service -f user_service/Dockerfile user_service

      - name: Build Document Service
        run: docker build -t smgxv/document-service -f document_service/Dockerfile document_service

      - name: Build Notification Service
        run: docker build -t smgxv/notification-service -f notification_service/Dockerfile notification_service

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker Images
        run: |
          docker push smgxv/ta-service
          docker push smgxv/user-service
          docker push smgxv/document-service
          docker push smgxv/notification-service

  # 3. SAST - SONARCLOUD
  sast-analysis:
    name: Static Analysis with SonarCloud
    needs: build-services
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 4. DAST - OWASP ZAP on TA service (local container)
  dast-analysis:
    name: DAST with OWASP ZAP
    needs: build-services
    runs-on: ubuntu-latest
    steps:
      - name: Pull and Run TA Service
        run: |
          docker pull smgxv/ta-service
          docker run -d -p 8080:8080 --name ta-service smgxv/ta-service

      - name: Tunggu Service Siap
        run: |
          for i in {1..10}; do
            if curl -s http://localhost:8080/health || curl -s http://localhost:8080; then
              echo "Service is up"
              break
            else
              echo "Waiting for service..."
              sleep 5
            fi
          done

      - name: Jalankan OWASP ZAP Scan
        run: |
          docker run --rm --network="host" \
            -v $(pwd):/zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
              -t http://localhost:8080 \
              -r zap_report.html \
              || true

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html

  # 5. DEPLOY TO VPS
  deploy:
    name: Deploy All Services to VPS
    needs: [sast-analysis, dast-analysis]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy TA Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            docker stop ta-service || true && docker rm ta-service || true
            docker pull smgxv/ta-service
            docker run -d -p 8080:8080 --name ta-service smgxv/ta-service
            docker network connect simta_net ta-service

      - name: Deploy User Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            docker stop user-service || true && docker rm user-service || true
            docker pull smgxv/user-service
            docker run -d -p 8081:8081 --name user-service smgxv/user-service
            docker network connect simta_net user-service

      - name: Deploy Document Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            docker stop document-service || true && docker rm document-service || true
            docker pull smgxv/document-service
            docker run -d -p 8082:8082 --name document-service smgxv/document-service
            docker network connect simta_net document-service

      - name: Deploy Notification Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            docker stop notification-service || true && docker rm notification-service || true
            docker pull smgxv/notification-service
            docker run -d -p 8083:8083 --name notification-service smgxv/notification-service
            docker network connect simta_net notification-service



# name : CI

# on:
#   push:
#     branches: [main]

# jobs:
#   running-tests:
#     name: Running Tests
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Set up Go
#         uses: actions/setup-go@v2
#         with:
#           go-version: 1.18

#   build-ta-service:
#     needs: running-tests
#     name: Build Image
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Build Image
#         run: docker build -t smgxv/ta-service -f ta_service/Dockerfile ta_service
#       - name: Login to DockerHub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
#       - name: Push Image
#         run: docker push smgxv/ta-service

#   deploy-ta-service:
#     needs: build-ta-service
#     runs-on: ubuntu-latest
#     steps:
#       - name: Deploy to VPS
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.VPS_HOST }}
#           username: ${{ secrets.VPS_USERNAME }}
#           password: ${{ secrets.VPS_PASSWORD }}
#           port: ${{ secrets.VPS_PORT }}
#           script: |
#             docker stop ta-service || true && docker rm ta-service || true
#             docker system prune -af
#             docker pull smgxv/ta-service
#             docker run -d -p 8080:8080 --name ta-service smgxv/ta-service
#             docker network connect simta_net ta-service


#   build-user-service:
#     needs: running-tests
#     name: Build User Service Image
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Build Image
#         run: docker build -t smgxv/user-service -f user_service/Dockerfile user_service
#       - name: Login to DockerHub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
#       - name: Push Image
#         run: docker push smgxv/user-service

#   deploy-user-service:
#     needs: build-user-service
#     runs-on: ubuntu-latest
#     steps:
#       - name: Deploy User Service to VPS
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.VPS_HOST }}
#           username: ${{ secrets.VPS_USERNAME }}
#           password: ${{ secrets.VPS_PASSWORD }}
#           port: ${{ secrets.VPS_PORT }}
#           script: |
#             docker stop user-service || true && docker rm user-service || true
#             docker system prune -af
#             docker pull smgxv/user-service
#             docker run -d -p 8081:8081 --name user-service smgxv/user-service
#             docker network connect simta_net user-service

#   build-document-service:
#     needs: running-tests
#     name: Build Document Service Image
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Build Image
#         run: docker build -t smgxv/document-service -f document_service/Dockerfile document_service
#       - name: Login to DockerHub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
#       - name: Push Image
#         run: docker push smgxv/document-service

#   deploy-document-service:
#     needs: build-document-service
#     runs-on: ubuntu-latest
#     steps:
#       - name: Deploy Document Service to VPS
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.VPS_HOST }}
#           username: ${{ secrets.VPS_USERNAME }}
#           password: ${{ secrets.VPS_PASSWORD }}
#           port: ${{ secrets.VPS_PORT }}
#           script: |
#             docker stop document-service || true && docker rm document-service || true
#             docker system prune -af
#             docker pull smgxv/document-service
#             docker run -d -p 8082:8082 --name document-service smgxv/document-service
#             docker network connect simta_net document-service

#   build-notification-service:
#     needs: running-tests
#     name: Build Notification Service Image
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Build Image
#         run: docker build -t smgxv/notification-service -f notification_service/Dockerfile notification_service
#       - name: Login to DockerHub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
#       - name: Push Image
#         run: docker push smgxv/notification-service

#   deploy-notification-service:
#     needs: build-notification-service
#     runs-on: ubuntu-latest
#     steps:
#       - name: Deploy Notification Service to VPS
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.VPS_HOST }}
#           username: ${{ secrets.VPS_USERNAME }}
#           password: ${{ secrets.VPS_PASSWORD }}
#           port: ${{ secrets.VPS_PORT }}
#           script: |
#             docker stop notification-service || true && docker rm notification-service || true
#             docker system prune -af
#             docker pull smgxv/notification-service
#             docker run -d -p 8083:8083 --name notification-service -v /home/youruser/uploads:/app/uploads smgxv/notification-service
#             docker network connect simta_net notification-service



